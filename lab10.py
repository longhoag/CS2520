
"""lab10.ipynb

Automatically generated by Colab.

"""

#Name: Long Hoang
#Lab 11

import random

"""#Task 1

This program will perform sorting action
"""

def task1():
  #(1)
  print("(1)")
  list1 = [5, 2, 12, 4, 9, 13, 22, 1, 6, 17]
  print(f"List 1 before sorting: {list1}")

  list1.sort(key = lambda x:-x) #sort in descending order
  print(f"List 1 after sorting: {list1}")

  #(2)
  print("\n(2)")
  data = [("Kate", 3), ("Sam", 2), ("Kate", 5), ("Jolly", 1), ("Alp", 2), ("Beta", 3), ("Alp", 1), ("Alpine", 2), ("Sam", 4), ("Bob", 2), ("Sam", 3)]

  data2 = data.copy() #create a copy of data
  print(f"Data 2 before sorting: {data2}")

  data2.sort(key = lambda x:x[0]) #sort by first name
  print(f"Data 2 after sorting: {data2}")


  #(3)
  print("\n(3)")
  data3 = data.copy() #create a copy of data
  print(f"Data 3 before sorting: {data3}")

  data3.sort(key = lambda x:x[1], reverse = True) #sort by count in descending order
  print(f"Data 3 after sorting: {data3}")

"""#Task 2

This program will perform action using map and filter function
"""

def task2():
  #(1)
  list21 = [random.randint(1, 100) for _ in range(20)] #create a list of 20 random number
  print(f"(1): {list21}")


  #(2) if the number is odd, square it; if even; double it.
  list22 = list(map(lambda x:x**2 if x%2==1 else x*2, list21))
  print(f"(2): {list22}")


  #(3) use filter function to remove all even numbers as well as multiples of 5 --> get only odd number and not-multiple of 5
  list23 = list(filter(lambda x:x%2==1 and x%5!=0, list21))
  print(f"(3): {list23}")

def main():
  print("Task 1: ")
  task1()
  print("\nTask 2: ")
  task2()

main()

#output task 1

'''
(1)
List 1 before sorting: [5, 2, 12, 4, 9, 13, 22, 1, 6, 17]
List 1 after sorting: [22, 17, 13, 12, 9, 6, 5, 4, 2, 1]

(2)
Data 2 before sorting: [('Kate', 3), ('Sam', 2), ('Kate', 5), ('Jolly', 1), ('Alp', 2), ('Beta', 3), ('Alp', 1), ('Alpine', 2), ('Sam', 4), ('Bob', 2), ('Sam', 3)]
Data 2 after sorting: [('Alp', 2), ('Alp', 1), ('Alpine', 2), ('Beta', 3), ('Bob', 2), ('Jolly', 1), ('Kate', 3), ('Kate', 5), ('Sam', 2), ('Sam', 4), ('Sam', 3)]

(3)
Data 3 before sorting: [('Kate', 3), ('Sam', 2), ('Kate', 5), ('Jolly', 1), ('Alp', 2), ('Beta', 3), ('Alp', 1), ('Alpine', 2), ('Sam', 4), ('Bob', 2), ('Sam', 3)]
Data 3 after sorting: [('Kate', 5), ('Sam', 4), ('Kate', 3), ('Beta', 3), ('Sam', 3), ('Sam', 2), ('Alp', 2), ('Alpine', 2), ('Bob', 2), ('Jolly', 1), ('Alp', 1)]
'''

#output task 2

'''
(1): [93, 24, 86, 22, 43, 17, 50, 43, 19, 54, 63, 23, 84, 31, 43, 58, 95, 44, 62, 46]
(2): [8649, 48, 172, 44, 1849, 289, 100, 1849, 361, 108, 3969, 529, 168, 961, 1849, 116, 9025, 88, 124, 92]
(3): [93, 43, 17, 43, 19, 63, 23, 31, 43]
'''
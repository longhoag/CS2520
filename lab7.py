# -*- coding: utf-8 -*-
"""lab7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yXRbTsJwfKLtdoNUaTt37Zzc71pJgYq-
"""

#Name: Long Hoang
#Lab7

import random

"""#Task 1

This program will use dictionary for username/password management
"""

#1) initialize usernames/passwords pairs

usernames = ["Jesse", "Alex", "Ban", "Alice", "Kate", "June", "Nam", "Quan", "Charlie", "Beta"]
passwords = ["x11yz", "hizzpp", "$$53th", "mddangiagt", "294drdng1", "A@@##3204", "123abc", "gotItRight!!", "marker1324"]

# create dictionary
credential = dict(zip(usernames, passwords))

#2) functions to log in a user by asking for a username and a password
def log_in():

  username = ""
  is_login = False

  while True:

    while True:
      username = input("Enter your username: ")

      #if username exists, break the loop
      if username in credential:
        break
      #username does not exist, re-prompt
      else:
        print("Username not found. Please try again.")

    #if password is wrong, 3 attemps allowed
    attempt = 3
    while attempt > 0:
      password = input("Enter your password: ")

      #if password is wrong, re-prompt
      if password not in credential[username]:
        print("Incorrect password. Please try again.")
        attempt -= 1
      else:
        # if match, login success and break the loop
        print("Login successful!")
        is_login = True
        break

    #if 3 times all failed, restart the login process
    if attempt == 0:
      print("You have reached the maximum number of attempts. Please try again!")
    else:
      break #successfully login


  #login function return username, login status for password change function
  return username, is_login

#3) if logged in, user can change password
def change_password(username):
  new_password = input("Enter your new password: ")

  #update password in dict
  credential.update({username: new_password})
  print("Password has been changed!")
  print(f"{username} : {credential.get(username)}")

def logout():
  is_login = False
  return is_login

def menu(username):
  #menu option for login user
  is_login = True

  #quit status
  quit = False

  print("User's actions: ")
  print("1. Change password")
  print("2. Logout")
  print("3. Logout and Quit!")

  #prompt for selecting options
  while True:
    option = input("Please enter option 1, 2 or 3: ")
    if option == "1":
      change_password(username)
      break
    elif option == "2":
      is_login = logout()
      print("You have logged out!")
      break
    elif option == "3":
      is_login = logout()
      quit = True
      print("You have logged out and quit!")
      break
    else:
      print("Invalid option")
  return is_login, quit

def task1():

  print(f"Before: {credential}")

  #initialize login, quit status
  is_login = False
  quit = False
  #initialize username
  username = ""

  #prompt login after logout
  while quit == False:
    while is_login == False:
      username, is_login = log_in()

    while is_login == True:
      is_login, quit = menu(username)
      if quit == True:
        break

  print(f"After: {credential}")

"""#Task 2

This program will manipulate sets

Let L1 be a list of first 100 randomly generated integer numbers in the range [1,
100], let L2 be the integers within the range [1, 100] that are divisible by either 3 or 4
"""

def task2():
  #1)
  l1 = [random.randint(1, 100) for _ in range(100)]
  l2 = [i for i in range(1, 100) if i % 3 == 0 or i % 4 == 0]

  #display l1, l2
  print(f"L1 = {l1}")
  print(f"L2 = {l2}")

  #2) form sets
  s1 = set(l1)
  s2 = set(l2)

  #display s1, s2
  print(f"S1 = {s1}") #s1 and l1 might look different because sets don't preserve order, and no duplicates

  print(f"S2 = {s2}")

  #3) union of ser s1 and s2
  r1 = s1 | s2  # using the union operator

  # Display r1
  print(f"Set R1: {len(r1)} elements, {r1}")


  #4) intersection of set s1 and s2
  r2 = s1 & s2  # using the intersection operator

  # Display r2
  print(f"Set R2: {len(r2)} elements, {r2}")

  #5) difference of s1 and s2
  r3 = s1 - s2  # using the difference operator

  # Display r3
  print(f"Set R3: {len(r3)} elements, {r3}")

def main():
  print("Task 1: \n")
  task1()
  print("\nTask 2: \n")
  task2()

main()

# output task 1: The tests are in order according to the assignment

'''
Before: {'Jesse': 'x11yz', 'Alex': 'hizzpp', 'Ban': '$$53th', 'Alice': 'mddangiagt', 'Kate': '294drdng1', 'June': 'A@@##3204', 'Nam': '123abc', 'Quan': 'gotItRight!!', 'Charlie': 'marker1324'}
Enter your username: Long
Username not found. Please try again.
Enter your username: Alex
Enter your password: hizzpp
Login successful!
User's actions:
1. Change password
2. Logout
3. Logout and Quit!
Please enter option 1, 2 or 3: 2
You have logged out!
Enter your username: Alex
Enter your password: qq
Incorrect password. Please try again.
Enter your password: ww
Incorrect password. Please try again.
Enter your password: hizzpp
Login successful!
User's actions:
1. Change password
2. Logout
3. Logout and Quit!
Please enter option 1, 2 or 3: 2
You have logged out!
Enter your username: Alex
Enter your password: qq
Incorrect password. Please try again.
Enter your password: ww
Incorrect password. Please try again.
Enter your password: ee
Incorrect password. Please try again.
You have reached the maximum number of attempts. Please try again!
Enter your username: Jesse
Enter your password: x11yz
Login successful!
User's actions:
1. Change password
2. Logout
3. Logout and Quit!
Please enter option 1, 2 or 3: 1
Enter your new password: abc
Password has been changed!
Jesse : abc
User's actions:
1. Change password
2. Logout
3. Logout and Quit!
Please enter option 1, 2 or 3: 2
You have logged out!
Enter your username: Alex
Enter your password: hizzpp
Login successful!
User's actions:
1. Change password
2. Logout
3. Logout and Quit!
Please enter option 1, 2 or 3: 1
Enter your new password: def
Password has been changed!
Alex : def
User's actions:
1. Change password
2. Logout
3. Logout and Quit!
Please enter option 1, 2 or 3: 3
You have logged out and quit!
After: {'Jesse': 'abc', 'Alex': 'def', 'Ban': '$$53th', 'Alice': 'mddangiagt', 'Kate': '294drdng1', 'June': 'A@@##3204', 'Nam': '123abc', 'Quan': 'gotItRight!!', 'Charlie': 'marker1324'}
'''

#output task 2: re-run result might be different because L1 is set to be random.

'''
L1 = [26, 66, 98, 90, 36, 72, 81, 91, 9, 19, 45, 93, 25, 24, 61, 89, 99, 15, 42, 31, 37, 48, 94, 39, 73, 6, 28, 13, 21, 46, 34, 5, 37, 56, 83, 24, 89, 86, 64, 74, 93, 98, 86, 64, 23, 52, 41, 27, 60, 22, 38, 11, 28, 63, 21, 83, 94, 22, 44, 18, 52, 79, 54, 31, 98, 72, 100, 55, 64, 13, 2, 66, 39, 5, 98, 35, 45, 38, 81, 84, 78, 10, 75, 53, 20, 99, 85, 52, 21, 9, 22, 29, 88, 73, 49, 39, 100, 44, 26, 72]
L2 = [3, 4, 6, 8, 9, 12, 15, 16, 18, 20, 21, 24, 27, 28, 30, 32, 33, 36, 39, 40, 42, 44, 45, 48, 51, 52, 54, 56, 57, 60, 63, 64, 66, 68, 69, 72, 75, 76, 78, 80, 81, 84, 87, 88, 90, 92, 93, 96, 99]
S1 = {2, 5, 6, 9, 10, 11, 13, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46, 48, 49, 52, 53, 54, 55, 56, 60, 61, 63, 64, 66, 72, 73, 74, 75, 78, 79, 81, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 98, 99, 100}
S2 = {3, 4, 6, 8, 9, 12, 15, 16, 18, 20, 21, 24, 27, 28, 30, 32, 33, 36, 39, 40, 42, 44, 45, 48, 51, 52, 54, 56, 57, 60, 63, 64, 66, 68, 69, 72, 75, 76, 78, 80, 81, 84, 87, 88, 90, 92, 93, 96, 99}
Set R1: 82 elements, {2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 57, 60, 61, 63, 64, 66, 68, 69, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100}
Set R2: 31 elements, {6, 9, 15, 18, 20, 21, 24, 27, 28, 36, 39, 42, 44, 45, 48, 52, 54, 56, 60, 63, 64, 66, 72, 75, 78, 81, 84, 88, 90, 93, 99}
Set R3: 33 elements, {2, 5, 10, 11, 13, 19, 22, 23, 25, 26, 29, 31, 34, 35, 37, 38, 41, 46, 49, 53, 55, 61, 73, 74, 79, 83, 85, 86, 89, 91, 94, 98, 100}
'''